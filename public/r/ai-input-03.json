{
  "name": "ai-input-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport {\r\n  PaperclipIcon as PaperPlaneRight,\r\n  MicIcon as Microphone,\r\n} from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\n\r\nexport function AIInputVariation3() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 52,\r\n    maxHeight: 200,\r\n  });\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleReset = () => {\r\n    setInputValue(\"\");\r\n    adjustHeight(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"relative max-w-xl w-full mx-auto\">\r\n        <div className=\"absolute inset-0 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950/20 dark:to-blue-950/20 rounded-xl -z-10\" />\r\n        <Textarea\r\n          placeholder=\"What can I help you with?\"\r\n          className={cn(\r\n            \"max-w-xl bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm rounded-xl pl-4 pr-14\",\r\n            \"placeholder:text-gray-400 dark:placeholder:text-gray-500\",\r\n            \"border-none\",\r\n            \"text-black dark:text-white text-wrap\",\r\n            \"overflow-y-auto resize-none\",\r\n            \"focus-visible:ring-1 focus-visible:ring-green-500 focus-visible:ring-offset-0\",\r\n            \"transition-all duration-200 ease-out\",\r\n            \"leading-[1.2] py-[14px]\",\r\n            \"min-h-[52px]\",\r\n            \"max-h-[200px]\"\r\n          )}\r\n          ref={textareaRef}\r\n          value={inputValue}\r\n          onChange={(e) => {\r\n            setInputValue(e.target.value);\r\n            adjustHeight();\r\n          }}\r\n          onKeyDown={(e) => {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n              e.preventDefault();\r\n              handleReset();\r\n            }\r\n          }}\r\n        />\r\n\r\n        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex\">\r\n          <button\r\n            onClick={handleReset}\r\n            type=\"button\"\r\n            className={cn(\r\n              \"p-2 rounded-lg transition-all duration-300\",\r\n              inputValue\r\n                ? \"bg-green-500 text-white\"\r\n                : \"bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-500\"\r\n            )}\r\n          >\r\n            {inputValue ? (\r\n              <PaperPlaneRight className=\"w-4 h-4\" />\r\n            ) : (\r\n              <Microphone className=\"w-4 h-4\" />\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "/components/easeui/ai-input/ai-input-03.tsx",
      "target": "/components/easeui/ai-input-03.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n  minHeight: number;\r\n  maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n  minHeight,\r\n  maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const adjustHeight = useCallback(\r\n    (reset?: boolean) => {\r\n      const textarea = textareaRef.current;\r\n      if (!textarea) return;\r\n\r\n      if (reset) {\r\n        textarea.style.height = `${minHeight}px`;\r\n        return;\r\n      }\r\n\r\n      // Temporarily shrink to get the right scrollHeight\r\n      textarea.style.height = `${minHeight}px`;\r\n\r\n      // Calculate new height\r\n      const newHeight = Math.max(\r\n        minHeight,\r\n        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)\r\n      );\r\n\r\n      textarea.style.height = `${newHeight}px`;\r\n    },\r\n    [minHeight, maxHeight]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Set initial height\r\n    const textarea = textareaRef.current;\r\n    if (textarea) {\r\n      textarea.style.height = `${minHeight}px`;\r\n    }\r\n  }, [minHeight]);\r\n\r\n  // Adjust height on window resize\r\n  useEffect(() => {\r\n    const handleResize = () => adjustHeight();\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, [adjustHeight]);\r\n\r\n  return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}