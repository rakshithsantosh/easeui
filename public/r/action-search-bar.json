{
  "name": "action-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect, useRef, type KeyboardEvent } from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport {\n  Search,\n  Send,\n  BarChart2,\n  Video,\n  PlaneTakeoff,\n  AudioLines,\n  LayoutGrid,\n  Command,\n  Settings,\n  FileText,\n  Calendar,\n  Mail,\n  MessageSquare,\n  Globe,\n  Zap,\n  Sparkles,\n  Palette,\n  Bookmark,\n} from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { cn } from \"@/lib/utils\"\n\ninterface Action {\n  id: string\n  label: string\n  icon: React.ReactNode\n  description?: string\n  shortcut?: string\n  category?: string\n  tags?: string[]\n  color?: string\n  isNew?: boolean\n  isPinned?: boolean\n  execute?: () => void\n}\n\ninterface ActionCategory {\n  name: string\n  actions: Action[]\n}\n\ninterface SearchResult {\n  categories: ActionCategory[]\n  recentActions: Action[]\n  suggestedActions: Action[]\n}\n\n// Sample action data with more variety and categories\nconst allActions: Action[] = [\n  {\n    id: \"1\",\n    label: \"Book tickets\",\n    icon: <PlaneTakeoff className=\"h-4 w-4\" style={{ color: \"#3b82f6\" }} />,\n    description: \"Find and book travel tickets\",\n    shortcut: \"⌘B\",\n    category: \"Travel\",\n    tags: [\"booking\", \"travel\", \"tickets\"],\n    color: \"#3b82f6\",\n  },\n  {\n    id: \"2\",\n    label: \"Summarize document\",\n    icon: <BarChart2 className=\"h-4 w-4\" style={{ color: \"#f97316\" }} />,\n    description: \"AI-powered document summary\",\n    shortcut: \"⌘S\",\n    category: \"AI Tools\",\n    tags: [\"ai\", \"summary\", \"document\"],\n    color: \"#f97316\",\n    isNew: true,\n  },\n  {\n    id: \"3\",\n    label: \"Screen Studio\",\n    icon: <Video className=\"h-4 w-4\" style={{ color: \"#8b5cf6\" }} />,\n    description: \"Record and edit screen captures\",\n    shortcut: \"⌘R\",\n    category: \"Media\",\n    tags: [\"video\", \"recording\", \"screen\"],\n    color: \"#8b5cf6\",\n  },\n  {\n    id: \"4\",\n    label: \"Talk to Assistant\",\n    icon: <AudioLines className=\"h-4 w-4\" style={{ color: \"#10b981\" }} />,\n    description: \"Voice-enabled AI assistant\",\n    shortcut: \"⌘T\",\n    category: \"AI Tools\",\n    tags: [\"voice\", \"ai\", \"assistant\"],\n    color: \"#10b981\",\n    isPinned: true,\n  },\n  {\n    id: \"5\",\n    label: \"Component Library\",\n    icon: <LayoutGrid className=\"h-4 w-4\" style={{ color: \"#0ea5e9\" }} />,\n    description: \"Browse UI component collection\",\n    shortcut: \"⌘L\",\n    category: \"Design\",\n    tags: [\"ui\", \"components\", \"design\"],\n    color: \"#0ea5e9\",\n  },\n  {\n    id: \"6\",\n    label: \"System Settings\",\n    icon: <Settings className=\"h-4 w-4\" style={{ color: \"#6b7280\" }} />,\n    description: \"Configure system preferences\",\n    shortcut: \"⌘,\",\n    category: \"System\",\n    tags: [\"settings\", \"preferences\", \"config\"],\n    color: \"#6b7280\",\n  },\n  {\n    id: \"7\",\n    label: \"Create Document\",\n    icon: <FileText className=\"h-4 w-4\" style={{ color: \"#ec4899\" }} />,\n    description: \"Create a new document\",\n    shortcut: \"⌘N\",\n    category: \"Productivity\",\n    tags: [\"document\", \"create\", \"new\"],\n    color: \"#ec4899\",\n  },\n  {\n    id: \"8\",\n    label: \"Schedule Meeting\",\n    icon: <Calendar className=\"h-4 w-4\" style={{ color: \"#14b8a6\" }} />,\n    description: \"Add event to calendar\",\n    shortcut: \"⌘M\",\n    category: \"Productivity\",\n    tags: [\"calendar\", \"meeting\", \"schedule\"],\n    color: \"#14b8a6\",\n    isNew: true,\n  },\n  {\n    id: \"9\",\n    label: \"Compose Email\",\n    icon: <Mail className=\"h-4 w-4\" style={{ color: \"#6366f1\" }} />,\n    description: \"Write a new email\",\n    shortcut: \"⌘E\",\n    category: \"Communication\",\n    tags: [\"email\", \"compose\", \"write\"],\n    color: \"#6366f1\",\n  },\n  {\n    id: \"10\",\n    label: \"Start Chat\",\n    icon: <MessageSquare className=\"h-4 w-4\" style={{ color: \"#f43f5e\" }} />,\n    description: \"Begin a new conversation\",\n    shortcut: \"⌘C\",\n    category: \"Communication\",\n    tags: [\"chat\", \"message\", \"conversation\"],\n    color: \"#f43f5e\",\n  },\n  {\n    id: \"11\",\n    label: \"Browse Internet\",\n    icon: <Globe className=\"h-4 w-4\" style={{ color: \"#0284c7\" }} />,\n    description: \"Open web browser\",\n    shortcut: \"⌘I\",\n    category: \"Web\",\n    tags: [\"browser\", \"internet\", \"web\"],\n    color: \"#0284c7\",\n  },\n  {\n    id: \"12\",\n    label: \"Quick Actions\",\n    icon: <Zap className=\"h-4 w-4\" style={{ color: \"#eab308\" }} />,\n    description: \"Access frequently used tools\",\n    shortcut: \"⌘Q\",\n    category: \"System\",\n    tags: [\"quick\", \"actions\", \"tools\"],\n    color: \"#eab308\",\n    isPinned: true,\n  },\n  {\n    id: \"13\",\n    label: \"Generate Image\",\n    icon: <Sparkles className=\"h-4 w-4\" style={{ color: \"#a855f7\" }} />,\n    description: \"AI image generation\",\n    shortcut: \"⌘G\",\n    category: \"AI Tools\",\n    tags: [\"ai\", \"image\", \"generate\"],\n    color: \"#a855f7\",\n    isNew: true,\n  },\n  {\n    id: \"14\",\n    label: \"Theme Settings\",\n    icon: <Palette className=\"h-4 w-4\" style={{ color: \"#f59e0b\" }} />,\n    description: \"Customize appearance\",\n    shortcut: \"⌘P\",\n    category: \"Design\",\n    tags: [\"theme\", \"appearance\", \"customize\"],\n    color: \"#f59e0b\",\n  },\n  {\n    id: \"15\",\n    label: \"Saved Items\",\n    icon: <Bookmark className=\"h-4 w-4\" style={{ color: \"#0d9488\" }} />,\n    description: \"View bookmarked content\",\n    shortcut: \"⌘D\",\n    category: \"Productivity\",\n    tags: [\"saved\", \"bookmarks\", \"favorites\"],\n    color: \"#0d9488\",\n  },\n]\n\n// Group actions by category\nconst groupActionsByCategory = (actions: Action[]): ActionCategory[] => {\n  const categories: Record<string, Action[]> = {}\n\n  actions.forEach((action) => {\n    const category = action.category || \"Uncategorized\"\n    if (!categories[category]) {\n      categories[category] = []\n    }\n    categories[category].push(action)\n  })\n\n  return Object.entries(categories).map(([name, actions]) => ({\n    name,\n    actions,\n  }))\n}\n\nexport default function ActionSearchBar({\n  defaultOpen = false,\n  className,\n}: {\n  defaultOpen?: boolean\n  className?: string\n}) {\n  const [query, setQuery] = useState(\"\")\n  const [isFocused, setIsFocused] = useState(defaultOpen)\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const [activeCategory, setActiveCategory] = useState<string | null>(null)\n  const [recentActions] = useState<Action[]>(allActions.filter((a) => a.isPinned).slice(0, 3))\n  const inputRef = useRef<HTMLInputElement>(null)\n  const resultsRef = useRef<HTMLDivElement>(null)\n\n  // Process and filter actions based on query\n  const getSearchResults = (): SearchResult => {\n    if (!query.trim()) {\n      // Show categories, recent and suggested when no query\n      return {\n        categories: groupActionsByCategory(allActions),\n        recentActions: recentActions,\n        suggestedActions: allActions.filter((a) => a.isNew).slice(0, 3),\n      }\n    }\n\n    const normalizedQuery = query.toLowerCase().trim()\n    const filteredActions = allActions.filter((action) => {\n      const searchableText = [\n        action.label.toLowerCase(),\n        action.description?.toLowerCase() || \"\",\n        ...(action.tags || []).map((tag) => tag.toLowerCase()),\n      ].join(\" \")\n\n      return searchableText.includes(normalizedQuery)\n    })\n\n    // If filtering by category, only show that category\n    if (activeCategory) {\n      const categoryActions = filteredActions.filter((a) => a.category === activeCategory)\n      return {\n        categories: [\n          {\n            name: activeCategory,\n            actions: categoryActions,\n          },\n        ],\n        recentActions: [],\n        suggestedActions: [],\n      }\n    }\n\n    return {\n      categories: groupActionsByCategory(filteredActions),\n      recentActions: [],\n      suggestedActions: [],\n    }\n  }\n\n  const searchResults = getSearchResults()\n\n  // Calculate total number of visible actions for keyboard navigation\n  const getAllVisibleActions = (): Action[] => {\n    const allVisible: Action[] = []\n\n    if (searchResults.recentActions.length > 0) {\n      allVisible.push(...searchResults.recentActions)\n    }\n\n    if (searchResults.suggestedActions.length > 0) {\n      allVisible.push(...searchResults.suggestedActions)\n    }\n\n    searchResults.categories.forEach((category) => {\n      allVisible.push(...category.actions)\n    })\n\n    return allVisible\n  }\n\n  const visibleActions = getAllVisibleActions()\n\n  // Reset selected index when results change\n  useEffect(() => {\n    setSelectedIndex(0)\n  }, [query, activeCategory])\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    switch (e.key) {\n      case \"ArrowDown\":\n        e.preventDefault()\n        setSelectedIndex((prev) => (prev + 1) % visibleActions.length)\n        break\n      case \"ArrowUp\":\n        e.preventDefault()\n        setSelectedIndex((prev) => (prev - 1 + visibleActions.length) % visibleActions.length)\n        break\n      case \"Enter\":\n        e.preventDefault()\n        if (visibleActions[selectedIndex]) {\n          executeAction(visibleActions[selectedIndex])\n        }\n        break\n      case \"Escape\":\n        e.preventDefault()\n        setIsFocused(false)\n        inputRef.current?.blur()\n        break\n    }\n  }\n\n  // Scroll selected item into view\n  useEffect(() => {\n    if (resultsRef.current) {\n      const selectedElement = resultsRef.current.querySelector(`[data-index=\"${selectedIndex}\"]`)\n      if (selectedElement) {\n        selectedElement.scrollIntoView({ block: \"nearest\", behavior: \"smooth\" })\n      }\n    }\n  }, [selectedIndex])\n\n  // Global keyboard shortcut to focus search\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === \"k\") {\n        e.preventDefault()\n        inputRef.current?.focus()\n        setIsFocused(true)\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown as any)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown as any)\n  }, [])\n\n  const executeAction = (action: Action) => {\n    console.log(`Executing action: ${action.label}`)\n    if (action.execute) {\n      action.execute()\n    }\n    setIsFocused(false)\n    setQuery(\"\")\n    inputRef.current?.blur()\n  }\n\n  const handleCategoryClick = (category: string) => {\n    setActiveCategory((prev) => (prev === category ? null : category))\n  }\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0, y: -10, height: 0 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      height: \"auto\",\n      transition: {\n        duration: 0.2,\n        staggerChildren: 0.03,\n      },\n    },\n    exit: {\n      opacity: 0,\n      y: -10,\n      height: 0,\n      transition: {\n        duration: 0.15,\n      },\n    },\n  }\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 10 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.2,\n      },\n    },\n    exit: {\n      opacity: 0,\n      y: -5,\n      transition: {\n        duration: 0.1,\n      },\n    },\n  }\n\n  return (\n    <div className={cn(\"w-full max-w-2xl mx-auto\", className)}>\n      <div className=\"relative flex flex-col justify-start items-center\">\n        <div className=\"w-full sticky top-0 bg-background z-10 pt-4 pb-1\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <label className=\"text-xs font-medium text-muted-foreground\" htmlFor=\"action-search\">\n              Search Commands\n            </label>\n            <div className=\"flex items-center gap-1\">\n              <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                ⌘K\n              </kbd>\n            </div>\n          </div>\n\n          <div className=\"relative\">\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              <Command className=\"h-4 w-4\" />\n            </div>\n\n            <Input\n              ref={inputRef}\n              id=\"action-search\"\n              type=\"text\"\n              placeholder=\"Type a command or search...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              onFocus={() => setIsFocused(true)}\n              onBlur={() => setTimeout(() => setIsFocused(false), 200)}\n              onKeyDown={handleKeyDown}\n              className=\"pl-9 pr-9 py-2 h-10 text-sm rounded-lg focus-visible:ring-offset-0 bg-background border-border\"\n            />\n\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4\">\n              <AnimatePresence mode=\"wait\">\n                {query.length > 0 ? (\n                  <motion.div\n                    key=\"send\"\n                    initial={{ scale: 0.8, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    exit={{ scale: 0.8, opacity: 0 }}\n                    transition={{ duration: 0.15 }}\n                  >\n                    <Send className=\"w-4 h-4 text-muted-foreground\" />\n                  </motion.div>\n                ) : (\n                  <motion.div\n                    key=\"search\"\n                    initial={{ scale: 0.8, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    exit={{ scale: 0.8, opacity: 0 }}\n                    transition={{ duration: 0.15 }}\n                  >\n                    <Search className=\"w-4 h-4 text-muted-foreground\" />\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"w-full\" ref={resultsRef}>\n          <AnimatePresence>\n            {isFocused && (\n              <motion.div\n                className=\"w-full border rounded-lg shadow-lg overflow-hidden bg-popover mt-1 max-h-[70vh] overflow-y-auto\"\n                variants={containerVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"exit\"\n              >\n                {/* Category filters */}\n                {searchResults.categories.length > 1 && (\n                  <motion.div className=\"p-2 border-b flex gap-1 flex-wrap\" variants={itemVariants}>\n                    {searchResults.categories.map((category) => (\n                      <Badge\n                        key={category.name}\n                        variant={activeCategory === category.name ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer hover:bg-accent transition-colors\"\n                        onClick={() => handleCategoryClick(category.name)}\n                      >\n                        {category.name}\n                      </Badge>\n                    ))}\n                  </motion.div>\n                )}\n\n                {/* Recent actions */}\n                {searchResults.recentActions.length > 0 && (\n                  <motion.div variants={itemVariants}>\n                    <div className=\"px-3 pt-2 pb-1\">\n                      <h3 className=\"text-xs font-medium text-muted-foreground\">Recent</h3>\n                    </div>\n                    <ul>\n                      {searchResults.recentActions.map((action, idx) => (\n                        <motion.li\n                          key={action.id}\n                          data-index={idx}\n                          className={cn(\n                            \"px-3 py-2 mx-1 my-0.5 flex items-center justify-between hover:bg-accent hover:text-accent-foreground cursor-pointer rounded-md transition-colors\",\n                            selectedIndex === idx ? \"bg-accent text-accent-foreground\" : \"\",\n                          )}\n                          variants={itemVariants}\n                          onClick={() => executeAction(action)}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <div\n                              className=\"flex items-center justify-center w-6 h-6 rounded-md\"\n                              style={{ backgroundColor: `${action.color}20` }}\n                            >\n                              {action.icon}\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium\">{action.label}</div>\n                              <div className=\"text-xs text-muted-foreground\">{action.description}</div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {action.shortcut && (\n                              <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                                {action.shortcut}\n                              </kbd>\n                            )}\n                          </div>\n                        </motion.li>\n                      ))}\n                    </ul>\n                  </motion.div>\n                )}\n\n                {/* Suggested actions */}\n                {searchResults.suggestedActions.length > 0 && (\n                  <motion.div variants={itemVariants}>\n                    <div className=\"px-3 pt-2 pb-1\">\n                      <h3 className=\"text-xs font-medium text-muted-foreground\">Suggested</h3>\n                    </div>\n                    <ul>\n                      {searchResults.suggestedActions.map((action, idx) => {\n                        const actionIndex = searchResults.recentActions.length + idx\n                        return (\n                          <motion.li\n                            key={action.id}\n                            data-index={actionIndex}\n                            className={cn(\n                              \"px-3 py-2 mx-1 my-0.5 flex items-center justify-between hover:bg-accent hover:text-accent-foreground cursor-pointer rounded-md transition-colors\",\n                              selectedIndex === actionIndex ? \"bg-accent text-accent-foreground\" : \"\",\n                            )}\n                            variants={itemVariants}\n                            onClick={() => executeAction(action)}\n                          >\n                            <div className=\"flex items-center gap-3\">\n                              <div\n                                className=\"flex items-center justify-center w-6 h-6 rounded-md\"\n                                style={{ backgroundColor: `${action.color}20` }}\n                              >\n                                {action.icon}\n                              </div>\n                              <div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm font-medium\">{action.label}</span>\n                                  {action.isNew && (\n                                    <Badge\n                                      variant=\"default\"\n                                      className=\"text-[10px] px-1 py-0 h-4 bg-emerald-500 hover:bg-emerald-500\"\n                                    >\n                                      New\n                                    </Badge>\n                                  )}\n                                </div>\n                                <div className=\"text-xs text-muted-foreground\">{action.description}</div>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              {action.shortcut && (\n                                <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                                  {action.shortcut}\n                                </kbd>\n                              )}\n                            </div>\n                          </motion.li>\n                        )\n                      })}\n                    </ul>\n                  </motion.div>\n                )}\n\n                {/* Categorized actions */}\n                {searchResults.categories.map((category, categoryIndex) => {\n                  const startingIndex = searchResults.recentActions.length + searchResults.suggestedActions.length\n\n                  return (\n                    <motion.div key={category.name} variants={itemVariants}>\n                      <div className=\"px-3 pt-2 pb-1\">\n                        <h3 className=\"text-xs font-medium text-muted-foreground\">{category.name}</h3>\n                      </div>\n                      <ul>\n                        {category.actions.map((action, idx) => {\n                          // Calculate the absolute index for this action\n                          let actionIndex = startingIndex\n                          for (let i = 0; i < categoryIndex; i++) {\n                            actionIndex += searchResults.categories[i].actions.length\n                          }\n                          actionIndex += idx\n\n                          return (\n                            <motion.li\n                              key={action.id}\n                              data-index={actionIndex}\n                              className={cn(\n                                \"px-3 py-2 mx-1 my-0.5 flex items-center justify-between hover:bg-accent hover:text-accent-foreground cursor-pointer rounded-md transition-colors\",\n                                selectedIndex === actionIndex ? \"bg-accent text-accent-foreground\" : \"\",\n                              )}\n                              variants={itemVariants}\n                              onClick={() => executeAction(action)}\n                            >\n                              <div className=\"flex items-center gap-3\">\n                                <div\n                                  className=\"flex items-center justify-center w-6 h-6 rounded-md\"\n                                  style={{ backgroundColor: `${action.color}20` }}\n                                >\n                                  {action.icon}\n                                </div>\n                                <div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <span className=\"text-sm font-medium\">{action.label}</span>\n                                    {action.isNew && (\n                                      <Badge\n                                        variant=\"default\"\n                                        className=\"text-[10px] px-1 py-0 h-4 bg-emerald-500 hover:bg-emerald-500\"\n                                      >\n                                        New\n                                      </Badge>\n                                    )}\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">{action.description}</div>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                {action.shortcut && (\n                                  <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                                    {action.shortcut}\n                                  </kbd>\n                                )}\n                              </div>\n                            </motion.li>\n                          )\n                        })}\n                      </ul>\n                    </motion.div>\n                  )\n                })}\n\n                {/* Footer with keyboard shortcuts */}\n                <motion.div\n                  className=\"mt-1 px-3 py-2 border-t flex items-center justify-between text-xs text-muted-foreground\"\n                  variants={itemVariants}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-1\">\n                      <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                        ↑\n                      </kbd>\n                      <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                        ↓\n                      </kbd>\n                      <span>to navigate</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                        enter\n                      </kbd>\n                      <span>to select</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\n                      esc\n                    </kbd>\n                    <span>to close</span>\n                  </div>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "/components/easeui/action-search-bar.tsx",
      "target": "/components/easeui/action-search-bar.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useState } from \"react\";\r\n\r\nfunction useDebounce<T>(value: T, delay: number = 500): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;\r\n",
      "path": "/hooks/use-debounce.ts",
      "target": "/hooks/use-debounce.ts"
    }
  ]
}